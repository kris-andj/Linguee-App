// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace WebTemplate.Migrations
{
    [DbContext(typeof(ProjekatContext))]
    partial class ProjekatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kviz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojPitanja")
                        .HasColumnType("int");

                    b.Property<int>("IdLekcije")
                        .HasColumnType("int");

                    b.Property<string>("TipKviza")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLekcije");

                    b.ToTable("Kvizovi");
                });

            modelBuilder.Entity("KvizRezultat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdKorisnika")
                        .HasColumnType("int");

                    b.Property<int>("IdKviza")
                        .HasColumnType("int");

                    b.Property<int>("OsvojeniPoeni")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdKviza");

                    b.ToTable("KvizRezultati");
                });

            modelBuilder.Entity("Milioner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<int>("idPodnivoa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("idPodnivoa")
                        .IsUnique();

                    b.ToTable("Milioners");
                });

            modelBuilder.Entity("Models.Gramatika", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gramatike", (string)null);
                });

            modelBuilder.Entity("Models.Konsultacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdProfesora")
                        .HasColumnType("int");

                    b.Property<int?>("IdRoditelja")
                        .HasColumnType("int");

                    b.Property<int?>("IdUcenika")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<int?>("RoditeljId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UcenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProfesora");

                    b.HasIndex("IdRoditelja");

                    b.HasIndex("IdUcenika");

                    b.HasIndex("ProfesorId");

                    b.HasIndex("RoditeljId");

                    b.HasIndex("UcenikId");

                    b.ToTable("Konsultacije");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Uloga")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Korisnici", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Models.Lekcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivLekcije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PodnivoId")
                        .HasColumnType("int");

                    b.Property<string>("TekstualneLekcije")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoLekcije")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PodnivoId");

                    b.ToTable("Lekcije");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Lekcija");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.MilionerAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MilionerAnswers");
                });

            modelBuilder.Entity("Models.MilionerQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrectAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("MilionerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MilionerId");

                    b.ToTable("MilionerQuestions");
                });

            modelBuilder.Entity("Models.MilionerResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UcenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UcenikId");

                    b.ToTable("MilionerResults");
                });

            modelBuilder.Entity("Models.Nivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NazivNivoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nivoi");
                });

            modelBuilder.Entity("Models.Ocena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProfesora")
                        .HasColumnType("int");

                    b.Property<int>("IdUcenika")
                        .HasColumnType("int");

                    b.Property<int?>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<int?>("UcenikId")
                        .HasColumnType("int");

                    b.Property<string>("Vrednost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorId");

                    b.HasIndex("UcenikId");

                    b.ToTable("Ocene");
                });

            modelBuilder.Entity("Models.UpisaniNivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NivoId")
                        .HasColumnType("int");

                    b.Property<int>("UcenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NivoId");

                    b.HasIndex("UcenikId");

                    b.ToTable("UpisaniNivoi");
                });

            modelBuilder.Entity("Models.WordScrambleQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScrambledWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WordScrambleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordScrambleId");

                    b.ToTable("WordScrambleQuestions");
                });

            modelBuilder.Entity("Podnivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NazivPodnivoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NivoId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NivoId");

                    b.ToTable("Podnivoi");
                });

            modelBuilder.Entity("WordScramble", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<int>("idPodnivoa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("idPodnivoa")
                        .IsUnique();

                    b.ToTable("WordScramble");
                });

            modelBuilder.Entity("WordScrambleResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UcenikId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UcenikId");

                    b.ToTable("WordScrambleResults");
                });

            modelBuilder.Entity("Models.Admin", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.ToTable("Admini", (string)null);
                });

            modelBuilder.Entity("Models.Profesor", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<string>("Biografija")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Profesori", (string)null);
                });

            modelBuilder.Entity("Models.Roditelj", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.ToTable("Roditelji", (string)null);
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.HasBaseType("Models.Korisnik");

                    b.Property<int?>("roditeljId")
                        .HasColumnType("int");

                    b.HasIndex("roditeljId");

                    b.ToTable("Ucenici", (string)null);
                });

            modelBuilder.Entity("Models.Vokabular", b =>
                {
                    b.HasBaseType("Models.Lekcija");

                    b.HasDiscriminator().HasValue("Vokabular");
                });

            modelBuilder.Entity("Kviz", b =>
                {
                    b.HasOne("Models.Lekcija", "Lekcija")
                        .WithMany("Kvizovi")
                        .HasForeignKey("IdLekcije")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lekcija");
                });

            modelBuilder.Entity("KvizRezultat", b =>
                {
                    b.HasOne("Kviz", "Kviz")
                        .WithMany()
                        .HasForeignKey("IdKviza")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kviz");
                });

            modelBuilder.Entity("Milioner", b =>
                {
                    b.HasOne("Models.MilionerResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Podnivo", "podnivo")
                        .WithOne("milioner")
                        .HasForeignKey("Milioner", "idPodnivoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("podnivo");
                });

            modelBuilder.Entity("Models.Konsultacija", b =>
                {
                    b.HasOne("Models.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("IdProfesora")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Roditelj", "Roditelj")
                        .WithMany()
                        .HasForeignKey("IdRoditelja")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Ucenik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("IdUcenika")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Profesor", null)
                        .WithMany("Konsultacije")
                        .HasForeignKey("ProfesorId");

                    b.HasOne("Models.Roditelj", null)
                        .WithMany("Konsultacije")
                        .HasForeignKey("RoditeljId");

                    b.HasOne("Models.Ucenik", null)
                        .WithMany("Konsultacije")
                        .HasForeignKey("UcenikId");

                    b.Navigation("Profesor");

                    b.Navigation("Roditelj");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("Models.Lekcija", b =>
                {
                    b.HasOne("Podnivo", "podnivo")
                        .WithMany("lekcije")
                        .HasForeignKey("PodnivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("podnivo");
                });

            modelBuilder.Entity("Models.MilionerAnswers", b =>
                {
                    b.HasOne("Models.MilionerQuestions", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Models.MilionerQuestions", b =>
                {
                    b.HasOne("Milioner", null)
                        .WithMany("Questions")
                        .HasForeignKey("MilionerId");
                });

            modelBuilder.Entity("Models.MilionerResult", b =>
                {
                    b.HasOne("Models.Ucenik", null)
                        .WithMany("MilionerResults")
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Ocena", b =>
                {
                    b.HasOne("Models.Profesor", "Profesor")
                        .WithMany("Ocene")
                        .HasForeignKey("ProfesorId");

                    b.HasOne("Models.Ucenik", "Ucenik")
                        .WithMany("Ocene")
                        .HasForeignKey("UcenikId");

                    b.Navigation("Profesor");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("Models.UpisaniNivo", b =>
                {
                    b.HasOne("Models.Nivo", "Nivo")
                        .WithMany()
                        .HasForeignKey("NivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Ucenik", "Ucenik")
                        .WithMany("upisaniNivoi")
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivo");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("Models.WordScrambleQuestions", b =>
                {
                    b.HasOne("WordScramble", null)
                        .WithMany("Question")
                        .HasForeignKey("WordScrambleId");
                });

            modelBuilder.Entity("Podnivo", b =>
                {
                    b.HasOne("Models.Nivo", "Nivo")
                        .WithMany("Podnivoi")
                        .HasForeignKey("NivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nivo");
                });

            modelBuilder.Entity("WordScramble", b =>
                {
                    b.HasOne("WordScrambleResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("Podnivo", "podnivo")
                        .WithOne("wordScramble")
                        .HasForeignKey("WordScramble", "idPodnivoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("podnivo");
                });

            modelBuilder.Entity("WordScrambleResult", b =>
                {
                    b.HasOne("Models.Ucenik", null)
                        .WithMany("WordScrambleResults")
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Admin", b =>
                {
                    b.HasOne("Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Models.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Profesor", b =>
                {
                    b.HasOne("Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Models.Profesor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Roditelj", b =>
                {
                    b.HasOne("Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Models.Roditelj", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.HasOne("Models.Korisnik", null)
                        .WithOne()
                        .HasForeignKey("Models.Ucenik", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Roditelj", "roditelj")
                        .WithMany("Ucenici")
                        .HasForeignKey("roditeljId");

                    b.Navigation("roditelj");
                });

            modelBuilder.Entity("Milioner", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Models.Lekcija", b =>
                {
                    b.Navigation("Kvizovi");
                });

            modelBuilder.Entity("Models.MilionerQuestions", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Models.Nivo", b =>
                {
                    b.Navigation("Podnivoi");
                });

            modelBuilder.Entity("Podnivo", b =>
                {
                    b.Navigation("lekcije");

                    b.Navigation("milioner");

                    b.Navigation("wordScramble");
                });

            modelBuilder.Entity("WordScramble", b =>
                {
                    b.Navigation("Question");
                });

            modelBuilder.Entity("Models.Profesor", b =>
                {
                    b.Navigation("Konsultacije");

                    b.Navigation("Ocene");
                });

            modelBuilder.Entity("Models.Roditelj", b =>
                {
                    b.Navigation("Konsultacije");

                    b.Navigation("Ucenici");
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.Navigation("Konsultacije");

                    b.Navigation("MilionerResults");

                    b.Navigation("Ocene");

                    b.Navigation("WordScrambleResults");

                    b.Navigation("upisaniNivoi");
                });
#pragma warning restore 612, 618
        }
    }
}
